---
# tasks file for ansible-role-cuda
- name: "Gather OS specific variables"
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution|lower }}.yml"
    - "{{ ansible_os_family|lower }}.yml"

- block:
  - include_tasks: configure_yum.yml
    when: ansible_pkg_mgr == 'yum'

  - include_tasks: configure_apt.yml
    when: ansible_pkg_mgr == 'apt'

  - name: Install CUDA packages (1.5-2GB download, also restarts if cuda_restart_node_on_install is set to True)
    package:
      name: "{{ item }}"
      state: present
    with_items: "{{ cuda_packages }}"
    register: cuda_packages_installation
    notify:
     - ZZ CUDA Restart server
     - ZZ CUDA Wait for server to restart

  - name: Template CUDA paths to user environments
    template:
      src: cuda.sh.j2
      dest: /etc/profile.d/cuda.sh
      mode: 0755
    when: cuda_bash_profile|bool

  - include_tasks: cuda_init.yml
    when: cuda_init

  # This is here because if we in the same playbook try to start slurmd without
  # having run the cuda_init.sh script then slurmd doesn't start and the play fails.
  # todo: reload nvidia modules/etc instead of restart
  - name: flush the handlers - so that GPUs are initialized before we start slurm
    meta: flush_handlers

  - name: Copy dcgm rpm to host
    tags: dcgm
    copy:
      src: "files/{{ dcmgmt_packages }}"
      dest: "/tmp/{{ dcmgmt_packages }}"

  - name: Install datacenter mgmt package if we have it
    tags: dcgm
    yum:
      name: "/tmp/{{ dcmgmt_packages }}"
      state: present
    when: dcmgmt_packages_exist

  - name: We'll enable dcgm systemd service
    tags: dcgm
    systemd:
      daemon_reload: yes
      enabled: yes
      name: "{{dcmgmt_systemd}}"
      state: started
  
  - name: Make sure we have additional types on collectd
    tags: dcgm
    blockinfile:
      path: /usr/share/collectd/types.db
      state: present
      block: |
        # DCGM types
        ecc_dbe_aggregate_total                  value:GAUGE:0:U
        ecc_sbe_aggregate_total                  value:GAUGE:0:U
        ecc_dbe_volatile_total                   value:GAUGE:0:U
        ecc_sbe_volatile_total                   value:GAUGE:0:U
        fb_free                                  value:GAUGE:0:U
        fb_total                                 value:GAUGE:0:U
        fb_used                                  value:GAUGE:0:U
        gpu_temp                                 value:GAUGE:U:U
        gpu_utilization                          value:GAUGE:0:100
        mem_copy_utilization                     value:GAUGE:0:100
        memory_clock                             value:GAUGE:0:U
        memory_temp                              value:GAUGE:U:U
        nvlink_bandwidth_total                   value:GAUGE:0:U
        nvlink_recovery_error_count_total        value:GAUGE:0:U
        nvlink_replay_error_count_total          value:GAUGE:0:U
        pcie_replay_counter                      value:GAUGE:0:U
        pcie_rx_throughput                       value:GAUGE:0:U
        pcie_tx_throughput                       value:GAUGE:0:U
        power_usage                              value:GAUGE:0:U
        power_violation                          value:GAUGE:0:U
        retired_pages_dbe                        value:GAUGE:0:U
        retired_pages_pending                    value:GAUGE:0:U
        retired_pages_sbe                        value:GAUGE:0:U
        sm_clock                                 value:GAUGE:0:U
        thermal_violation                        value:GAUGE:0:U
        total_energy_consumption                 value:GAUGE:0:U
        xid_errors                               value:GAUGE:0:U

  - name: create directory for dcgm python-libraries
    tags: dcgm
    file:
      path: "{{ dcmgmt_python_path }}"
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Copy collectd-plugin
    tags: dcgm
    copy:
      remote_src: yes
      src: /usr/local/dcgm/samples/scripts/dcgm_collectd_plugin.py
      dest: "{{ dcmgmt_python_path }}"

  - name: Fix library-path to plugin.py
    tags: dcgm
    lineinfile:
      path: "{{ dcmgmt_python_path }}/dcgm_collectd_plugin.py"
      regexp: "^g_dcgmLibPath = '/usr/lib'$"
      line: "g_dcgmLibPath = '/usr/lib64'"

  - name: Adding dcgm python libraries
    tags: dcgm
    file: 
      dest: "{{ dcmgmt_python_path }}/{{ item }}"
      src: "/usr/local/dcgm/bindings/{{ item }}" 
      state: link
    with_items: "{{ dcmgmt_python_libs }}"

  - name: Create collectd.conf for dcgm-plugin
    tags: dcgm
    template:
      src: dcgm.j2
      dest: "{{ dcmgmt_collectd_conf }}" 
      
  - name: Restart collectd service
    tags: dcgm
    service:
      name: collectd.service
      state: restarted

  when: gpu

# vim:ft=ansible:
